OBJECTS allow us to group values—including other objects—to build more complex structures.
Values of the type object are arbitrary collections of properties.
One way to create an object is by using braces as an expression.
  Inside the braces, there is a list of properties separated by commas.
  Each property has a name followed by a colon and a value.
  Properties whose names aren’t valid binding names or valid numbers have to be quoted.
  //EX let descriptions = {work: "Went to work","touched tree": "Touched a tree"};
  This means that braces have two meanings in JavaScript.
    At the start of a statement, they start a block of statements.
    In any other position, they describe an object
DELETE OPERATOR  is a unary operator that, when applied to an object property, will remove the named property from the object
  The difference between setting a property to undefined and actually deleting it is that,
  in the first case, the object still has the property (it just doesn’t have a very interesting value),
  whereas in the second case the property is no longer present and in will return false.
Object.assign function that copies all properties from one object into another
  let objectA = {a: 1, b: 2};
  Object.assign(objectA, {b: 3, c: 4});
  console.log(objectA);
  // → {a: 1, b: 3, c: 4}


ARRAY is written as a list of values between square brackets, separated by commas.
  just a kind of object specialized for storing sequences of things.
The NOTATION for getting at the elements inside an array also uses square brackets.

describe element lookup:
A pair of square brackets immediately after an expression,
with another expression inside of them,
will look up the element in the left-hand expression
that corresponds to the index given by the expression in the brackets.

PROPERTIES
myString.length and Math.max These are expressions that access a PROPERTY of some value
Almost all JavaScript values have properties. The exceptions are null and undefined.
ways to access properties in JavaScript are with a dot and with square brackets.
When using a dot, the word after the dot is the literal name of the property.
  value.x fetches the property of value named “x"
When using square brackets, the expression between the brackets is evaluated to get the property name.
  alue[x] tries to evaluate the expression x and uses the result, converted to a string, as the property name.
METHODS:properties that hold function values.
assign a value to a property expression with the = operator.

STACK: in programming, is a data structure that allows you to push values into it
  and pop them out again in the opposite order so that the thing that was added last is removed firsT


numbers, strings, and Booleans, are all IMMUTIBLE, is impossible to change values of those types.
   you take a specific string value, that value will always remain the same. The text inside it cannot be changed
object properties are MUTIBLE, the can change


The object1 and object2 bindings grasp the same object, which is why changing object1 also changes the value of object2
They are said to have the same IDENTITY.
When you compare objects with JavaScript’s == operator, it compares by identity
Comparing different objects will return false, even if they have identical properties. There is no “deep” comparison operation built into JavaScript

The binding object3 points to a different object, which initially contains the same properties as object1 but lives a separate life.
  let object1 = {value: 10};
  let object2 = object1;
  let object3 = {value: 10};
  console.log(object1 == object2);// → true
  console.log(object1 == object3);// → false
CONST TRICKERY!!
  const binding to an object can itself not be changed and will continue to point at the same object,
  the contents of that object might change.
  //EX
    const score = {visitors: 0, home: 0};
    score.visitors = 1;                   // This is okay
    score = {visitors: 1, home: 1};       // This isn't allowed, cant change what the variable or binding is bound to becasue of the const
DESTRUCTURING: if a property name in brace notation isn’t followed by a value, its value is taken from the binding with the same name.
/ /ex {events, squirrel} //same {events: events, squirrel: squirrel }
Destructuring be used on on an array: If you know the value you are binding is an array, you can use square brackets to “look inside” of the value, binding its contents.
  // table = [a,b,c,d]
  //instead of function phi(table) you can do function phi([n00, n01, n10, n11])
A similar trick works for objects, using braces instead of square brackets.
  let {name} = {name: "Faraji", age: 23}; // kind of like name = {name: "Faraji", age: 23}.name;
  console.log(name);// → Faraji




computers are deterministic machines—they always react the same way if given the same input

properties only grasp their value, rather than contain it,
  objects and arrays are stored in the computer’s memory as sequences of bits holding the addresses—the place in memory—of their contents.
SERIALIZE data. That means it is converted into a flat description.
  If you want to save data in a file for later or send it to another computer over the network, you have to somehow convert these tangles of memory addresses to a description that can be stored or senT
A popular serialization format is called JSON
  All property names have to be surrounded by double quotes, and only simple data expressions are allowed—no function calls, bindings, or anything that involves actual computation.
JavaScript gives us the functions JSON.stringify and JSON.parse to convert data to and from this format.
  The first takes a JavaScript value and returns a JSON-encoded string. The second takes such a string and converts it to the value it encodes.
//EX
    let string = JSON.stringify({squirrel: false, events: ["weekend"]});
    console.log(string);  // → {"squirrel":false,"events":["weekend"]}
    console.log(JSON.parse(string).events); // → ["weekend"]









  .
